// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Chat.proto

#ifndef PROTOBUF_INCLUDED_Chat_2eproto
#define PROTOBUF_INCLUDED_Chat_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3006001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Chat_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_Chat_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_Chat_2eproto();
namespace Chat {
class ChatMessage;
class ChatMessageDefaultTypeInternal;
extern ChatMessageDefaultTypeInternal _ChatMessage_default_instance_;
class SignIn;
class SignInDefaultTypeInternal;
extern SignInDefaultTypeInternal _SignIn_default_instance_;
class SignOut;
class SignOutDefaultTypeInternal;
extern SignOutDefaultTypeInternal _SignOut_default_instance_;
class Unauthorized;
class UnauthorizedDefaultTypeInternal;
extern UnauthorizedDefaultTypeInternal _Unauthorized_default_instance_;
class createChannel;
class createChannelDefaultTypeInternal;
extern createChannelDefaultTypeInternal _createChannel_default_instance_;
class joinChannel;
class joinChannelDefaultTypeInternal;
extern joinChannelDefaultTypeInternal _joinChannel_default_instance_;
class leaveChannel;
class leaveChannelDefaultTypeInternal;
extern leaveChannelDefaultTypeInternal _leaveChannel_default_instance_;
}  // namespace Chat
namespace google {
namespace protobuf {
template<> ::Chat::ChatMessage* Arena::CreateMaybeMessage<::Chat::ChatMessage>(Arena*);
template<> ::Chat::SignIn* Arena::CreateMaybeMessage<::Chat::SignIn>(Arena*);
template<> ::Chat::SignOut* Arena::CreateMaybeMessage<::Chat::SignOut>(Arena*);
template<> ::Chat::Unauthorized* Arena::CreateMaybeMessage<::Chat::Unauthorized>(Arena*);
template<> ::Chat::createChannel* Arena::CreateMaybeMessage<::Chat::createChannel>(Arena*);
template<> ::Chat::joinChannel* Arena::CreateMaybeMessage<::Chat::joinChannel>(Arena*);
template<> ::Chat::leaveChannel* Arena::CreateMaybeMessage<::Chat::leaveChannel>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace Chat {

// ===================================================================

class ChatMessage final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Chat.ChatMessage) */ {
 public:
  ChatMessage();
  virtual ~ChatMessage();

  ChatMessage(const ChatMessage& from);

  inline ChatMessage& operator=(const ChatMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChatMessage(ChatMessage&& from) noexcept
    : ChatMessage() {
    *this = ::std::move(from);
  }

  inline ChatMessage& operator=(ChatMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ChatMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChatMessage* internal_default_instance() {
    return reinterpret_cast<const ChatMessage*>(
               &_ChatMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ChatMessage* other);
  friend void swap(ChatMessage& a, ChatMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChatMessage* New() const final {
    return CreateMaybeMessage<ChatMessage>(nullptr);
  }

  ChatMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChatMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ChatMessage& from);
  void MergeFrom(const ChatMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatMessage* other);
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::google::protobuf::StringPiece FullMessageName() {
    return "Chat.ChatMessage";
  }
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string text = 1;
  void clear_text();
  static const int kTextFieldNumber = 1;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // string channel = 2;
  void clear_channel();
  static const int kChannelFieldNumber = 2;
  const ::std::string& channel() const;
  void set_channel(const ::std::string& value);
  #if LANG_CXX11
  void set_channel(::std::string&& value);
  #endif
  void set_channel(const char* value);
  void set_channel(const char* value, size_t size);
  ::std::string* mutable_channel();
  ::std::string* release_channel();
  void set_allocated_channel(::std::string* channel);

  // @@protoc_insertion_point(class_scope:Chat.ChatMessage)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::google::protobuf::internal::ArenaStringPtr channel_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Chat_2eproto;
};
// -------------------------------------------------------------------

class SignIn final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Chat.SignIn) */ {
 public:
  SignIn();
  virtual ~SignIn();

  SignIn(const SignIn& from);

  inline SignIn& operator=(const SignIn& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SignIn(SignIn&& from) noexcept
    : SignIn() {
    *this = ::std::move(from);
  }

  inline SignIn& operator=(SignIn&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SignIn& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SignIn* internal_default_instance() {
    return reinterpret_cast<const SignIn*>(
               &_SignIn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SignIn* other);
  friend void swap(SignIn& a, SignIn& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SignIn* New() const final {
    return CreateMaybeMessage<SignIn>(nullptr);
  }

  SignIn* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SignIn>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SignIn& from);
  void MergeFrom(const SignIn& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignIn* other);
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::google::protobuf::StringPiece FullMessageName() {
    return "Chat.SignIn";
  }
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string ip = 2;
  void clear_ip();
  static const int kIpFieldNumber = 2;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // int32 port = 3;
  void clear_port();
  static const int kPortFieldNumber = 3;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // bool admin = 4;
  void clear_admin();
  static const int kAdminFieldNumber = 4;
  bool admin() const;
  void set_admin(bool value);

  // @@protoc_insertion_point(class_scope:Chat.SignIn)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::int32 port_;
  bool admin_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Chat_2eproto;
};
// -------------------------------------------------------------------

class SignOut final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Chat.SignOut) */ {
 public:
  SignOut();
  virtual ~SignOut();

  SignOut(const SignOut& from);

  inline SignOut& operator=(const SignOut& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SignOut(SignOut&& from) noexcept
    : SignOut() {
    *this = ::std::move(from);
  }

  inline SignOut& operator=(SignOut&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SignOut& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SignOut* internal_default_instance() {
    return reinterpret_cast<const SignOut*>(
               &_SignOut_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SignOut* other);
  friend void swap(SignOut& a, SignOut& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SignOut* New() const final {
    return CreateMaybeMessage<SignOut>(nullptr);
  }

  SignOut* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SignOut>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SignOut& from);
  void MergeFrom(const SignOut& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignOut* other);
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::google::protobuf::StringPiece FullMessageName() {
    return "Chat.SignOut";
  }
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Chat.SignOut)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Chat_2eproto;
};
// -------------------------------------------------------------------

class Unauthorized final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Chat.Unauthorized) */ {
 public:
  Unauthorized();
  virtual ~Unauthorized();

  Unauthorized(const Unauthorized& from);

  inline Unauthorized& operator=(const Unauthorized& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Unauthorized(Unauthorized&& from) noexcept
    : Unauthorized() {
    *this = ::std::move(from);
  }

  inline Unauthorized& operator=(Unauthorized&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Unauthorized& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Unauthorized* internal_default_instance() {
    return reinterpret_cast<const Unauthorized*>(
               &_Unauthorized_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Unauthorized* other);
  friend void swap(Unauthorized& a, Unauthorized& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Unauthorized* New() const final {
    return CreateMaybeMessage<Unauthorized>(nullptr);
  }

  Unauthorized* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Unauthorized>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Unauthorized& from);
  void MergeFrom(const Unauthorized& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Unauthorized* other);
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::google::protobuf::StringPiece FullMessageName() {
    return "Chat.Unauthorized";
  }
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Chat.Unauthorized)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Chat_2eproto;
};
// -------------------------------------------------------------------

class joinChannel final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Chat.joinChannel) */ {
 public:
  joinChannel();
  virtual ~joinChannel();

  joinChannel(const joinChannel& from);

  inline joinChannel& operator=(const joinChannel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  joinChannel(joinChannel&& from) noexcept
    : joinChannel() {
    *this = ::std::move(from);
  }

  inline joinChannel& operator=(joinChannel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const joinChannel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const joinChannel* internal_default_instance() {
    return reinterpret_cast<const joinChannel*>(
               &_joinChannel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(joinChannel* other);
  friend void swap(joinChannel& a, joinChannel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline joinChannel* New() const final {
    return CreateMaybeMessage<joinChannel>(nullptr);
  }

  joinChannel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<joinChannel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const joinChannel& from);
  void MergeFrom(const joinChannel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(joinChannel* other);
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::google::protobuf::StringPiece FullMessageName() {
    return "Chat.joinChannel";
  }
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string channelName = 1;
  void clear_channelname();
  static const int kChannelNameFieldNumber = 1;
  const ::std::string& channelname() const;
  void set_channelname(const ::std::string& value);
  #if LANG_CXX11
  void set_channelname(::std::string&& value);
  #endif
  void set_channelname(const char* value);
  void set_channelname(const char* value, size_t size);
  ::std::string* mutable_channelname();
  ::std::string* release_channelname();
  void set_allocated_channelname(::std::string* channelname);

  // @@protoc_insertion_point(class_scope:Chat.joinChannel)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr channelname_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Chat_2eproto;
};
// -------------------------------------------------------------------

class leaveChannel final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Chat.leaveChannel) */ {
 public:
  leaveChannel();
  virtual ~leaveChannel();

  leaveChannel(const leaveChannel& from);

  inline leaveChannel& operator=(const leaveChannel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  leaveChannel(leaveChannel&& from) noexcept
    : leaveChannel() {
    *this = ::std::move(from);
  }

  inline leaveChannel& operator=(leaveChannel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const leaveChannel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const leaveChannel* internal_default_instance() {
    return reinterpret_cast<const leaveChannel*>(
               &_leaveChannel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(leaveChannel* other);
  friend void swap(leaveChannel& a, leaveChannel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline leaveChannel* New() const final {
    return CreateMaybeMessage<leaveChannel>(nullptr);
  }

  leaveChannel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<leaveChannel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const leaveChannel& from);
  void MergeFrom(const leaveChannel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(leaveChannel* other);
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::google::protobuf::StringPiece FullMessageName() {
    return "Chat.leaveChannel";
  }
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string channelName = 1;
  void clear_channelname();
  static const int kChannelNameFieldNumber = 1;
  const ::std::string& channelname() const;
  void set_channelname(const ::std::string& value);
  #if LANG_CXX11
  void set_channelname(::std::string&& value);
  #endif
  void set_channelname(const char* value);
  void set_channelname(const char* value, size_t size);
  ::std::string* mutable_channelname();
  ::std::string* release_channelname();
  void set_allocated_channelname(::std::string* channelname);

  // @@protoc_insertion_point(class_scope:Chat.leaveChannel)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr channelname_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Chat_2eproto;
};
// -------------------------------------------------------------------

class createChannel final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Chat.createChannel) */ {
 public:
  createChannel();
  virtual ~createChannel();

  createChannel(const createChannel& from);

  inline createChannel& operator=(const createChannel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  createChannel(createChannel&& from) noexcept
    : createChannel() {
    *this = ::std::move(from);
  }

  inline createChannel& operator=(createChannel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const createChannel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const createChannel* internal_default_instance() {
    return reinterpret_cast<const createChannel*>(
               &_createChannel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(createChannel* other);
  friend void swap(createChannel& a, createChannel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline createChannel* New() const final {
    return CreateMaybeMessage<createChannel>(nullptr);
  }

  createChannel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<createChannel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const createChannel& from);
  void MergeFrom(const createChannel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(createChannel* other);
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::google::protobuf::StringPiece FullMessageName() {
    return "Chat.createChannel";
  }
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string channelName = 1;
  void clear_channelname();
  static const int kChannelNameFieldNumber = 1;
  const ::std::string& channelname() const;
  void set_channelname(const ::std::string& value);
  #if LANG_CXX11
  void set_channelname(::std::string&& value);
  #endif
  void set_channelname(const char* value);
  void set_channelname(const char* value, size_t size);
  ::std::string* mutable_channelname();
  ::std::string* release_channelname();
  void set_allocated_channelname(::std::string* channelname);

  // @@protoc_insertion_point(class_scope:Chat.createChannel)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr channelname_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Chat_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChatMessage

// string text = 1;
inline void ChatMessage::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChatMessage::text() const {
  // @@protoc_insertion_point(field_get:Chat.ChatMessage.text)
  return text_.GetNoArena();
}
inline void ChatMessage::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Chat.ChatMessage.text)
}
#if LANG_CXX11
inline void ChatMessage::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Chat.ChatMessage.text)
}
#endif
inline void ChatMessage::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Chat.ChatMessage.text)
}
inline void ChatMessage::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Chat.ChatMessage.text)
}
inline ::std::string* ChatMessage::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:Chat.ChatMessage.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatMessage::release_text() {
  // @@protoc_insertion_point(field_release:Chat.ChatMessage.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatMessage::set_allocated_text(::std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:Chat.ChatMessage.text)
}

// string channel = 2;
inline void ChatMessage::clear_channel() {
  channel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChatMessage::channel() const {
  // @@protoc_insertion_point(field_get:Chat.ChatMessage.channel)
  return channel_.GetNoArena();
}
inline void ChatMessage::set_channel(const ::std::string& value) {
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Chat.ChatMessage.channel)
}
#if LANG_CXX11
inline void ChatMessage::set_channel(::std::string&& value) {
  
  channel_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Chat.ChatMessage.channel)
}
#endif
inline void ChatMessage::set_channel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Chat.ChatMessage.channel)
}
inline void ChatMessage::set_channel(const char* value, size_t size) {
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Chat.ChatMessage.channel)
}
inline ::std::string* ChatMessage::mutable_channel() {
  
  // @@protoc_insertion_point(field_mutable:Chat.ChatMessage.channel)
  return channel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatMessage::release_channel() {
  // @@protoc_insertion_point(field_release:Chat.ChatMessage.channel)
  
  return channel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatMessage::set_allocated_channel(::std::string* channel) {
  if (channel != nullptr) {
    
  } else {
    
  }
  channel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel);
  // @@protoc_insertion_point(field_set_allocated:Chat.ChatMessage.channel)
}

// -------------------------------------------------------------------

// SignIn

// string name = 1;
inline void SignIn::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SignIn::name() const {
  // @@protoc_insertion_point(field_get:Chat.SignIn.name)
  return name_.GetNoArena();
}
inline void SignIn::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Chat.SignIn.name)
}
#if LANG_CXX11
inline void SignIn::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Chat.SignIn.name)
}
#endif
inline void SignIn::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Chat.SignIn.name)
}
inline void SignIn::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Chat.SignIn.name)
}
inline ::std::string* SignIn::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Chat.SignIn.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignIn::release_name() {
  // @@protoc_insertion_point(field_release:Chat.SignIn.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignIn::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Chat.SignIn.name)
}

// string ip = 2;
inline void SignIn::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SignIn::ip() const {
  // @@protoc_insertion_point(field_get:Chat.SignIn.ip)
  return ip_.GetNoArena();
}
inline void SignIn::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Chat.SignIn.ip)
}
#if LANG_CXX11
inline void SignIn::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Chat.SignIn.ip)
}
#endif
inline void SignIn::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Chat.SignIn.ip)
}
inline void SignIn::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Chat.SignIn.ip)
}
inline ::std::string* SignIn::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:Chat.SignIn.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignIn::release_ip() {
  // @@protoc_insertion_point(field_release:Chat.SignIn.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignIn::set_allocated_ip(::std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:Chat.SignIn.ip)
}

// int32 port = 3;
inline void SignIn::clear_port() {
  port_ = 0;
}
inline ::google::protobuf::int32 SignIn::port() const {
  // @@protoc_insertion_point(field_get:Chat.SignIn.port)
  return port_;
}
inline void SignIn::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:Chat.SignIn.port)
}

// bool admin = 4;
inline void SignIn::clear_admin() {
  admin_ = false;
}
inline bool SignIn::admin() const {
  // @@protoc_insertion_point(field_get:Chat.SignIn.admin)
  return admin_;
}
inline void SignIn::set_admin(bool value) {
  
  admin_ = value;
  // @@protoc_insertion_point(field_set:Chat.SignIn.admin)
}

// -------------------------------------------------------------------

// SignOut

// -------------------------------------------------------------------

// Unauthorized

// -------------------------------------------------------------------

// joinChannel

// string channelName = 1;
inline void joinChannel::clear_channelname() {
  channelname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& joinChannel::channelname() const {
  // @@protoc_insertion_point(field_get:Chat.joinChannel.channelName)
  return channelname_.GetNoArena();
}
inline void joinChannel::set_channelname(const ::std::string& value) {
  
  channelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Chat.joinChannel.channelName)
}
#if LANG_CXX11
inline void joinChannel::set_channelname(::std::string&& value) {
  
  channelname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Chat.joinChannel.channelName)
}
#endif
inline void joinChannel::set_channelname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Chat.joinChannel.channelName)
}
inline void joinChannel::set_channelname(const char* value, size_t size) {
  
  channelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Chat.joinChannel.channelName)
}
inline ::std::string* joinChannel::mutable_channelname() {
  
  // @@protoc_insertion_point(field_mutable:Chat.joinChannel.channelName)
  return channelname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* joinChannel::release_channelname() {
  // @@protoc_insertion_point(field_release:Chat.joinChannel.channelName)
  
  return channelname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void joinChannel::set_allocated_channelname(::std::string* channelname) {
  if (channelname != nullptr) {
    
  } else {
    
  }
  channelname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channelname);
  // @@protoc_insertion_point(field_set_allocated:Chat.joinChannel.channelName)
}

// -------------------------------------------------------------------

// leaveChannel

// string channelName = 1;
inline void leaveChannel::clear_channelname() {
  channelname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& leaveChannel::channelname() const {
  // @@protoc_insertion_point(field_get:Chat.leaveChannel.channelName)
  return channelname_.GetNoArena();
}
inline void leaveChannel::set_channelname(const ::std::string& value) {
  
  channelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Chat.leaveChannel.channelName)
}
#if LANG_CXX11
inline void leaveChannel::set_channelname(::std::string&& value) {
  
  channelname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Chat.leaveChannel.channelName)
}
#endif
inline void leaveChannel::set_channelname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Chat.leaveChannel.channelName)
}
inline void leaveChannel::set_channelname(const char* value, size_t size) {
  
  channelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Chat.leaveChannel.channelName)
}
inline ::std::string* leaveChannel::mutable_channelname() {
  
  // @@protoc_insertion_point(field_mutable:Chat.leaveChannel.channelName)
  return channelname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* leaveChannel::release_channelname() {
  // @@protoc_insertion_point(field_release:Chat.leaveChannel.channelName)
  
  return channelname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void leaveChannel::set_allocated_channelname(::std::string* channelname) {
  if (channelname != nullptr) {
    
  } else {
    
  }
  channelname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channelname);
  // @@protoc_insertion_point(field_set_allocated:Chat.leaveChannel.channelName)
}

// -------------------------------------------------------------------

// createChannel

// string channelName = 1;
inline void createChannel::clear_channelname() {
  channelname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& createChannel::channelname() const {
  // @@protoc_insertion_point(field_get:Chat.createChannel.channelName)
  return channelname_.GetNoArena();
}
inline void createChannel::set_channelname(const ::std::string& value) {
  
  channelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Chat.createChannel.channelName)
}
#if LANG_CXX11
inline void createChannel::set_channelname(::std::string&& value) {
  
  channelname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Chat.createChannel.channelName)
}
#endif
inline void createChannel::set_channelname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Chat.createChannel.channelName)
}
inline void createChannel::set_channelname(const char* value, size_t size) {
  
  channelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Chat.createChannel.channelName)
}
inline ::std::string* createChannel::mutable_channelname() {
  
  // @@protoc_insertion_point(field_mutable:Chat.createChannel.channelName)
  return channelname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* createChannel::release_channelname() {
  // @@protoc_insertion_point(field_release:Chat.createChannel.channelName)
  
  return channelname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void createChannel::set_allocated_channelname(::std::string* channelname) {
  if (channelname != nullptr) {
    
  } else {
    
  }
  channelname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channelname);
  // @@protoc_insertion_point(field_set_allocated:Chat.createChannel.channelName)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Chat

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_Chat_2eproto
