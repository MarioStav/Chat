// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Chat.proto

#include "Chat.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

namespace Chat {
class ChatMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChatMessage> _instance;
} _ChatMessage_default_instance_;
class SignInDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SignIn> _instance;
} _SignIn_default_instance_;
class SignOutDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SignOut> _instance;
} _SignOut_default_instance_;
class UnauthorizedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Unauthorized> _instance;
} _Unauthorized_default_instance_;
class joinChannelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<joinChannel> _instance;
} _joinChannel_default_instance_;
class leaveChannelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<leaveChannel> _instance;
} _leaveChannel_default_instance_;
class createChannelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<createChannel> _instance;
} _createChannel_default_instance_;
class showChannelsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<showChannels> _instance;
} _showChannels_default_instance_;
class showChannelsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<showChannelsResponse> _instance;
} _showChannelsResponse_default_instance_;
class deleteChannelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<deleteChannel> _instance;
} _deleteChannel_default_instance_;
class helpMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<helpMessage> _instance;
} _helpMessage_default_instance_;
class successDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<success> _instance;
} _success_default_instance_;
class failureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<failure> _instance;
} _failure_default_instance_;
}  // namespace Chat
static void InitDefaultsChatMessage_Chat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Chat::_ChatMessage_default_instance_;
    new (ptr) ::Chat::ChatMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Chat::ChatMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ChatMessage_Chat_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsChatMessage_Chat_2eproto}, {}};

static void InitDefaultsSignIn_Chat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Chat::_SignIn_default_instance_;
    new (ptr) ::Chat::SignIn();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Chat::SignIn::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SignIn_Chat_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSignIn_Chat_2eproto}, {}};

static void InitDefaultsSignOut_Chat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Chat::_SignOut_default_instance_;
    new (ptr) ::Chat::SignOut();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Chat::SignOut::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SignOut_Chat_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSignOut_Chat_2eproto}, {}};

static void InitDefaultsUnauthorized_Chat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Chat::_Unauthorized_default_instance_;
    new (ptr) ::Chat::Unauthorized();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Chat::Unauthorized::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Unauthorized_Chat_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUnauthorized_Chat_2eproto}, {}};

static void InitDefaultsjoinChannel_Chat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Chat::_joinChannel_default_instance_;
    new (ptr) ::Chat::joinChannel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Chat::joinChannel::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_joinChannel_Chat_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsjoinChannel_Chat_2eproto}, {}};

static void InitDefaultsleaveChannel_Chat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Chat::_leaveChannel_default_instance_;
    new (ptr) ::Chat::leaveChannel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Chat::leaveChannel::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_leaveChannel_Chat_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsleaveChannel_Chat_2eproto}, {}};

static void InitDefaultscreateChannel_Chat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Chat::_createChannel_default_instance_;
    new (ptr) ::Chat::createChannel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Chat::createChannel::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_createChannel_Chat_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultscreateChannel_Chat_2eproto}, {}};

static void InitDefaultsshowChannels_Chat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Chat::_showChannels_default_instance_;
    new (ptr) ::Chat::showChannels();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Chat::showChannels::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_showChannels_Chat_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsshowChannels_Chat_2eproto}, {}};

static void InitDefaultsshowChannelsResponse_Chat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Chat::_showChannelsResponse_default_instance_;
    new (ptr) ::Chat::showChannelsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Chat::showChannelsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_showChannelsResponse_Chat_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsshowChannelsResponse_Chat_2eproto}, {}};

static void InitDefaultsdeleteChannel_Chat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Chat::_deleteChannel_default_instance_;
    new (ptr) ::Chat::deleteChannel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Chat::deleteChannel::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_deleteChannel_Chat_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsdeleteChannel_Chat_2eproto}, {}};

static void InitDefaultshelpMessage_Chat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Chat::_helpMessage_default_instance_;
    new (ptr) ::Chat::helpMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Chat::helpMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_helpMessage_Chat_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultshelpMessage_Chat_2eproto}, {}};

static void InitDefaultssuccess_Chat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Chat::_success_default_instance_;
    new (ptr) ::Chat::success();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Chat::success::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_success_Chat_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultssuccess_Chat_2eproto}, {}};

static void InitDefaultsfailure_Chat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Chat::_failure_default_instance_;
    new (ptr) ::Chat::failure();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Chat::failure::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_failure_Chat_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsfailure_Chat_2eproto}, {}};

void InitDefaults_Chat_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_ChatMessage_Chat_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SignIn_Chat_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SignOut_Chat_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Unauthorized_Chat_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_joinChannel_Chat_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_leaveChannel_Chat_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_createChannel_Chat_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_showChannels_Chat_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_showChannelsResponse_Chat_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_deleteChannel_Chat_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_helpMessage_Chat_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_success_Chat_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_failure_Chat_2eproto.base);
}

static ::google::protobuf::Metadata file_level_metadata_Chat_2eproto[13];
static constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_Chat_2eproto = nullptr;
static constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_Chat_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_Chat_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Chat::ChatMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Chat::ChatMessage, text_),
  PROTOBUF_FIELD_OFFSET(::Chat::ChatMessage, channel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Chat::SignIn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Chat::SignIn, name_),
  PROTOBUF_FIELD_OFFSET(::Chat::SignIn, ip_),
  PROTOBUF_FIELD_OFFSET(::Chat::SignIn, port_),
  PROTOBUF_FIELD_OFFSET(::Chat::SignIn, admin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Chat::SignOut, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Chat::Unauthorized, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Chat::Unauthorized, text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Chat::joinChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Chat::joinChannel, channelname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Chat::leaveChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Chat::leaveChannel, channelname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Chat::createChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Chat::createChannel, channelname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Chat::showChannels, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Chat::showChannelsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Chat::showChannelsResponse, channels_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Chat::deleteChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Chat::deleteChannel, channelname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Chat::helpMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Chat::success, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Chat::success, text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Chat::failure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Chat::failure, text_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Chat::ChatMessage)},
  { 7, -1, sizeof(::Chat::SignIn)},
  { 16, -1, sizeof(::Chat::SignOut)},
  { 21, -1, sizeof(::Chat::Unauthorized)},
  { 27, -1, sizeof(::Chat::joinChannel)},
  { 33, -1, sizeof(::Chat::leaveChannel)},
  { 39, -1, sizeof(::Chat::createChannel)},
  { 45, -1, sizeof(::Chat::showChannels)},
  { 50, -1, sizeof(::Chat::showChannelsResponse)},
  { 56, -1, sizeof(::Chat::deleteChannel)},
  { 62, -1, sizeof(::Chat::helpMessage)},
  { 67, -1, sizeof(::Chat::success)},
  { 73, -1, sizeof(::Chat::failure)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::Chat::_ChatMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Chat::_SignIn_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Chat::_SignOut_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Chat::_Unauthorized_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Chat::_joinChannel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Chat::_leaveChannel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Chat::_createChannel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Chat::_showChannels_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Chat::_showChannelsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Chat::_deleteChannel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Chat::_helpMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Chat::_success_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Chat::_failure_default_instance_),
};

static ::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_Chat_2eproto = {
  {}, AddDescriptors_Chat_2eproto, "Chat.proto", schemas,
  file_default_instances, TableStruct_Chat_2eproto::offsets,
  file_level_metadata_Chat_2eproto, 13, file_level_enum_descriptors_Chat_2eproto, file_level_service_descriptors_Chat_2eproto,
};

const char descriptor_table_protodef_Chat_2eproto[] =
  "\n\nChat.proto\022\004Chat\",\n\013ChatMessage\022\014\n\004tex"
  "t\030\001 \001(\t\022\017\n\007channel\030\002 \001(\t\"\?\n\006SignIn\022\014\n\004na"
  "me\030\001 \001(\t\022\n\n\002ip\030\002 \001(\t\022\014\n\004port\030\003 \001(\005\022\r\n\005ad"
  "min\030\004 \001(\010\"\t\n\007SignOut\"\034\n\014Unauthorized\022\014\n\004"
  "text\030\001 \001(\t\"\"\n\013joinChannel\022\023\n\013channelName"
  "\030\001 \001(\t\"#\n\014leaveChannel\022\023\n\013channelName\030\001 "
  "\001(\t\"$\n\rcreateChannel\022\023\n\013channelName\030\001 \001("
  "\t\"\016\n\014showChannels\"(\n\024showChannelsRespons"
  "e\022\020\n\010channels\030\001 \003(\t\"$\n\rdeleteChannel\022\023\n\013"
  "channelName\030\001 \001(\t\"\r\n\013helpMessage\"\027\n\007succ"
  "ess\022\014\n\004text\030\001 \001(\t\"\027\n\007failure\022\014\n\004text\030\001 \001"
  "(\tb\006proto3"
  ;
static ::google::protobuf::internal::DescriptorTable descriptor_table_Chat_2eproto = {
  false, InitDefaults_Chat_2eproto, 
  descriptor_table_protodef_Chat_2eproto,
  "Chat.proto", &assign_descriptors_table_Chat_2eproto, 450,
};

void AddDescriptors_Chat_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_Chat_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Chat_2eproto = []() { AddDescriptors_Chat_2eproto(); return true; }();
namespace Chat {

// ===================================================================

void ChatMessage::InitAsDefaultInstance() {
}
class ChatMessage::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChatMessage::kTextFieldNumber;
const int ChatMessage::kChannelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChatMessage::ChatMessage()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Chat.ChatMessage)
}
ChatMessage::ChatMessage(const ChatMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.text().size() > 0) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  channel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.channel().size() > 0) {
    channel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_);
  }
  // @@protoc_insertion_point(copy_constructor:Chat.ChatMessage)
}

void ChatMessage::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ChatMessage_Chat_2eproto.base);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ChatMessage::~ChatMessage() {
  // @@protoc_insertion_point(destructor:Chat.ChatMessage)
  SharedDtor();
}

void ChatMessage::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ChatMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChatMessage& ChatMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ChatMessage_Chat_2eproto.base);
  return *internal_default_instance();
}


void ChatMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:Chat.ChatMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ChatMessage::_InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::google::protobuf::uint32 tag;
    ptr = ::google::protobuf::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string text = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::internal::InlineGreedyStringParserUTF8(mutable_text(), ptr, ctx, "Chat.ChatMessage.text");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string channel = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::internal::InlineGreedyStringParserUTF8(mutable_channel(), ptr, ctx, "Chat.ChatMessage.channel");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag,
          _internal_metadata_.mutable_unknown_fields(), ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ChatMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Chat.ChatMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string text = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Chat.ChatMessage.text"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string channel = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->channel().data(), static_cast<int>(this->channel().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Chat.ChatMessage.channel"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Chat.ChatMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Chat.ChatMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ChatMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Chat.ChatMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Chat.ChatMessage.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  // string channel = 2;
  if (this->channel().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channel().data(), static_cast<int>(this->channel().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Chat.ChatMessage.channel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->channel(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Chat.ChatMessage)
}

::google::protobuf::uint8* ChatMessage::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Chat.ChatMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Chat.ChatMessage.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  // string channel = 2;
  if (this->channel().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channel().data(), static_cast<int>(this->channel().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Chat.ChatMessage.channel");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->channel(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Chat.ChatMessage)
  return target;
}

size_t ChatMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Chat.ChatMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 1;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }

  // string channel = 2;
  if (this->channel().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->channel());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChatMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Chat.ChatMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatMessage* source =
      ::google::protobuf::DynamicCastToGenerated<ChatMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Chat.ChatMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Chat.ChatMessage)
    MergeFrom(*source);
  }
}

void ChatMessage::MergeFrom(const ChatMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Chat.ChatMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from.channel().size() > 0) {

    channel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_);
  }
}

void ChatMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Chat.ChatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatMessage::CopyFrom(const ChatMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Chat.ChatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatMessage::IsInitialized() const {
  return true;
}

void ChatMessage::Swap(ChatMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChatMessage::InternalSwap(ChatMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  text_.Swap(&other->text_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  channel_.Swap(&other->channel_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata ChatMessage::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Chat_2eproto);
  return ::file_level_metadata_Chat_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SignIn::InitAsDefaultInstance() {
}
class SignIn::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SignIn::kNameFieldNumber;
const int SignIn::kIpFieldNumber;
const int SignIn::kPortFieldNumber;
const int SignIn::kAdminFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SignIn::SignIn()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Chat.SignIn)
}
SignIn::SignIn(const SignIn& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ip().size() > 0) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  ::memcpy(&port_, &from.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&admin_) -
    reinterpret_cast<char*>(&port_)) + sizeof(admin_));
  // @@protoc_insertion_point(copy_constructor:Chat.SignIn)
}

void SignIn::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SignIn_Chat_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&admin_) -
      reinterpret_cast<char*>(&port_)) + sizeof(admin_));
}

SignIn::~SignIn() {
  // @@protoc_insertion_point(destructor:Chat.SignIn)
  SharedDtor();
}

void SignIn::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SignIn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SignIn& SignIn::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SignIn_Chat_2eproto.base);
  return *internal_default_instance();
}


void SignIn::Clear() {
// @@protoc_insertion_point(message_clear_start:Chat.SignIn)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&admin_) -
      reinterpret_cast<char*>(&port_)) + sizeof(admin_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SignIn::_InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::google::protobuf::uint32 tag;
    ptr = ::google::protobuf::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "Chat.SignIn.name");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string ip = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::internal::InlineGreedyStringParserUTF8(mutable_ip(), ptr, ctx, "Chat.SignIn.ip");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 port = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        set_port(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool admin = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        set_admin(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag,
          _internal_metadata_.mutable_unknown_fields(), ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SignIn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Chat.SignIn)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Chat.SignIn.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ip = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), static_cast<int>(this->ip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Chat.SignIn.ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 port = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool admin = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &admin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Chat.SignIn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Chat.SignIn)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SignIn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Chat.SignIn)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Chat.SignIn.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string ip = 2;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Chat.SignIn.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ip(), output);
  }

  // int32 port = 3;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }

  // bool admin = 4;
  if (this->admin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->admin(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Chat.SignIn)
}

::google::protobuf::uint8* SignIn::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Chat.SignIn)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Chat.SignIn.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string ip = 2;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Chat.SignIn.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // int32 port = 3;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }

  // bool admin = 4;
  if (this->admin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->admin(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Chat.SignIn)
  return target;
}

size_t SignIn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Chat.SignIn)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string ip = 2;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // int32 port = 3;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  // bool admin = 4;
  if (this->admin() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignIn::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Chat.SignIn)
  GOOGLE_DCHECK_NE(&from, this);
  const SignIn* source =
      ::google::protobuf::DynamicCastToGenerated<SignIn>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Chat.SignIn)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Chat.SignIn)
    MergeFrom(*source);
  }
}

void SignIn::MergeFrom(const SignIn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Chat.SignIn)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.admin() != 0) {
    set_admin(from.admin());
  }
}

void SignIn::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Chat.SignIn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignIn::CopyFrom(const SignIn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Chat.SignIn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignIn::IsInitialized() const {
  return true;
}

void SignIn::Swap(SignIn* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SignIn::InternalSwap(SignIn* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ip_.Swap(&other->ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(port_, other->port_);
  swap(admin_, other->admin_);
}

::google::protobuf::Metadata SignIn::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Chat_2eproto);
  return ::file_level_metadata_Chat_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SignOut::InitAsDefaultInstance() {
}
class SignOut::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SignOut::SignOut()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Chat.SignOut)
}
SignOut::SignOut(const SignOut& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Chat.SignOut)
}

void SignOut::SharedCtor() {
}

SignOut::~SignOut() {
  // @@protoc_insertion_point(destructor:Chat.SignOut)
  SharedDtor();
}

void SignOut::SharedDtor() {
}

void SignOut::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SignOut& SignOut::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SignOut_Chat_2eproto.base);
  return *internal_default_instance();
}


void SignOut::Clear() {
// @@protoc_insertion_point(message_clear_start:Chat.SignOut)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SignOut::_InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::google::protobuf::uint32 tag;
    ptr = ::google::protobuf::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag,
          _internal_metadata_.mutable_unknown_fields(), ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SignOut::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Chat.SignOut)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Chat.SignOut)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Chat.SignOut)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SignOut::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Chat.SignOut)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Chat.SignOut)
}

::google::protobuf::uint8* SignOut::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Chat.SignOut)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Chat.SignOut)
  return target;
}

size_t SignOut::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Chat.SignOut)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignOut::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Chat.SignOut)
  GOOGLE_DCHECK_NE(&from, this);
  const SignOut* source =
      ::google::protobuf::DynamicCastToGenerated<SignOut>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Chat.SignOut)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Chat.SignOut)
    MergeFrom(*source);
  }
}

void SignOut::MergeFrom(const SignOut& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Chat.SignOut)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SignOut::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Chat.SignOut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignOut::CopyFrom(const SignOut& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Chat.SignOut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignOut::IsInitialized() const {
  return true;
}

void SignOut::Swap(SignOut* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SignOut::InternalSwap(SignOut* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SignOut::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Chat_2eproto);
  return ::file_level_metadata_Chat_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Unauthorized::InitAsDefaultInstance() {
}
class Unauthorized::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Unauthorized::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Unauthorized::Unauthorized()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Chat.Unauthorized)
}
Unauthorized::Unauthorized(const Unauthorized& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.text().size() > 0) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  // @@protoc_insertion_point(copy_constructor:Chat.Unauthorized)
}

void Unauthorized::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Unauthorized_Chat_2eproto.base);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Unauthorized::~Unauthorized() {
  // @@protoc_insertion_point(destructor:Chat.Unauthorized)
  SharedDtor();
}

void Unauthorized::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Unauthorized::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Unauthorized& Unauthorized::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Unauthorized_Chat_2eproto.base);
  return *internal_default_instance();
}


void Unauthorized::Clear() {
// @@protoc_insertion_point(message_clear_start:Chat.Unauthorized)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Unauthorized::_InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::google::protobuf::uint32 tag;
    ptr = ::google::protobuf::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string text = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::internal::InlineGreedyStringParserUTF8(mutable_text(), ptr, ctx, "Chat.Unauthorized.text");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag,
          _internal_metadata_.mutable_unknown_fields(), ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Unauthorized::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Chat.Unauthorized)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string text = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Chat.Unauthorized.text"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Chat.Unauthorized)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Chat.Unauthorized)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Unauthorized::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Chat.Unauthorized)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Chat.Unauthorized.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Chat.Unauthorized)
}

::google::protobuf::uint8* Unauthorized::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Chat.Unauthorized)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Chat.Unauthorized.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Chat.Unauthorized)
  return target;
}

size_t Unauthorized::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Chat.Unauthorized)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 1;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Unauthorized::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Chat.Unauthorized)
  GOOGLE_DCHECK_NE(&from, this);
  const Unauthorized* source =
      ::google::protobuf::DynamicCastToGenerated<Unauthorized>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Chat.Unauthorized)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Chat.Unauthorized)
    MergeFrom(*source);
  }
}

void Unauthorized::MergeFrom(const Unauthorized& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Chat.Unauthorized)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
}

void Unauthorized::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Chat.Unauthorized)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Unauthorized::CopyFrom(const Unauthorized& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Chat.Unauthorized)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Unauthorized::IsInitialized() const {
  return true;
}

void Unauthorized::Swap(Unauthorized* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Unauthorized::InternalSwap(Unauthorized* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  text_.Swap(&other->text_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata Unauthorized::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Chat_2eproto);
  return ::file_level_metadata_Chat_2eproto[kIndexInFileMessages];
}


// ===================================================================

void joinChannel::InitAsDefaultInstance() {
}
class joinChannel::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int joinChannel::kChannelNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

joinChannel::joinChannel()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Chat.joinChannel)
}
joinChannel::joinChannel(const joinChannel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channelname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.channelname().size() > 0) {
    channelname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channelname_);
  }
  // @@protoc_insertion_point(copy_constructor:Chat.joinChannel)
}

void joinChannel::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_joinChannel_Chat_2eproto.base);
  channelname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

joinChannel::~joinChannel() {
  // @@protoc_insertion_point(destructor:Chat.joinChannel)
  SharedDtor();
}

void joinChannel::SharedDtor() {
  channelname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void joinChannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const joinChannel& joinChannel::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_joinChannel_Chat_2eproto.base);
  return *internal_default_instance();
}


void joinChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:Chat.joinChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channelname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* joinChannel::_InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::google::protobuf::uint32 tag;
    ptr = ::google::protobuf::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string channelName = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::internal::InlineGreedyStringParserUTF8(mutable_channelname(), ptr, ctx, "Chat.joinChannel.channelName");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag,
          _internal_metadata_.mutable_unknown_fields(), ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool joinChannel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Chat.joinChannel)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string channelName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->channelname().data(), static_cast<int>(this->channelname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Chat.joinChannel.channelName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Chat.joinChannel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Chat.joinChannel)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void joinChannel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Chat.joinChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string channelName = 1;
  if (this->channelname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channelname().data(), static_cast<int>(this->channelname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Chat.joinChannel.channelName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->channelname(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Chat.joinChannel)
}

::google::protobuf::uint8* joinChannel::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Chat.joinChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string channelName = 1;
  if (this->channelname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channelname().data(), static_cast<int>(this->channelname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Chat.joinChannel.channelName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->channelname(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Chat.joinChannel)
  return target;
}

size_t joinChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Chat.joinChannel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string channelName = 1;
  if (this->channelname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->channelname());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void joinChannel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Chat.joinChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const joinChannel* source =
      ::google::protobuf::DynamicCastToGenerated<joinChannel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Chat.joinChannel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Chat.joinChannel)
    MergeFrom(*source);
  }
}

void joinChannel::MergeFrom(const joinChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Chat.joinChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channelname().size() > 0) {

    channelname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channelname_);
  }
}

void joinChannel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Chat.joinChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void joinChannel::CopyFrom(const joinChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Chat.joinChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool joinChannel::IsInitialized() const {
  return true;
}

void joinChannel::Swap(joinChannel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void joinChannel::InternalSwap(joinChannel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  channelname_.Swap(&other->channelname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata joinChannel::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Chat_2eproto);
  return ::file_level_metadata_Chat_2eproto[kIndexInFileMessages];
}


// ===================================================================

void leaveChannel::InitAsDefaultInstance() {
}
class leaveChannel::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int leaveChannel::kChannelNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

leaveChannel::leaveChannel()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Chat.leaveChannel)
}
leaveChannel::leaveChannel(const leaveChannel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channelname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.channelname().size() > 0) {
    channelname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channelname_);
  }
  // @@protoc_insertion_point(copy_constructor:Chat.leaveChannel)
}

void leaveChannel::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_leaveChannel_Chat_2eproto.base);
  channelname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

leaveChannel::~leaveChannel() {
  // @@protoc_insertion_point(destructor:Chat.leaveChannel)
  SharedDtor();
}

void leaveChannel::SharedDtor() {
  channelname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void leaveChannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const leaveChannel& leaveChannel::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_leaveChannel_Chat_2eproto.base);
  return *internal_default_instance();
}


void leaveChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:Chat.leaveChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channelname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* leaveChannel::_InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::google::protobuf::uint32 tag;
    ptr = ::google::protobuf::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string channelName = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::internal::InlineGreedyStringParserUTF8(mutable_channelname(), ptr, ctx, "Chat.leaveChannel.channelName");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag,
          _internal_metadata_.mutable_unknown_fields(), ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool leaveChannel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Chat.leaveChannel)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string channelName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->channelname().data(), static_cast<int>(this->channelname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Chat.leaveChannel.channelName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Chat.leaveChannel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Chat.leaveChannel)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void leaveChannel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Chat.leaveChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string channelName = 1;
  if (this->channelname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channelname().data(), static_cast<int>(this->channelname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Chat.leaveChannel.channelName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->channelname(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Chat.leaveChannel)
}

::google::protobuf::uint8* leaveChannel::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Chat.leaveChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string channelName = 1;
  if (this->channelname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channelname().data(), static_cast<int>(this->channelname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Chat.leaveChannel.channelName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->channelname(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Chat.leaveChannel)
  return target;
}

size_t leaveChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Chat.leaveChannel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string channelName = 1;
  if (this->channelname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->channelname());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void leaveChannel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Chat.leaveChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const leaveChannel* source =
      ::google::protobuf::DynamicCastToGenerated<leaveChannel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Chat.leaveChannel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Chat.leaveChannel)
    MergeFrom(*source);
  }
}

void leaveChannel::MergeFrom(const leaveChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Chat.leaveChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channelname().size() > 0) {

    channelname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channelname_);
  }
}

void leaveChannel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Chat.leaveChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void leaveChannel::CopyFrom(const leaveChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Chat.leaveChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool leaveChannel::IsInitialized() const {
  return true;
}

void leaveChannel::Swap(leaveChannel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void leaveChannel::InternalSwap(leaveChannel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  channelname_.Swap(&other->channelname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata leaveChannel::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Chat_2eproto);
  return ::file_level_metadata_Chat_2eproto[kIndexInFileMessages];
}


// ===================================================================

void createChannel::InitAsDefaultInstance() {
}
class createChannel::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int createChannel::kChannelNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

createChannel::createChannel()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Chat.createChannel)
}
createChannel::createChannel(const createChannel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channelname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.channelname().size() > 0) {
    channelname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channelname_);
  }
  // @@protoc_insertion_point(copy_constructor:Chat.createChannel)
}

void createChannel::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_createChannel_Chat_2eproto.base);
  channelname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

createChannel::~createChannel() {
  // @@protoc_insertion_point(destructor:Chat.createChannel)
  SharedDtor();
}

void createChannel::SharedDtor() {
  channelname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void createChannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const createChannel& createChannel::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_createChannel_Chat_2eproto.base);
  return *internal_default_instance();
}


void createChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:Chat.createChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channelname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* createChannel::_InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::google::protobuf::uint32 tag;
    ptr = ::google::protobuf::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string channelName = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::internal::InlineGreedyStringParserUTF8(mutable_channelname(), ptr, ctx, "Chat.createChannel.channelName");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag,
          _internal_metadata_.mutable_unknown_fields(), ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool createChannel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Chat.createChannel)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string channelName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->channelname().data(), static_cast<int>(this->channelname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Chat.createChannel.channelName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Chat.createChannel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Chat.createChannel)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void createChannel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Chat.createChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string channelName = 1;
  if (this->channelname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channelname().data(), static_cast<int>(this->channelname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Chat.createChannel.channelName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->channelname(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Chat.createChannel)
}

::google::protobuf::uint8* createChannel::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Chat.createChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string channelName = 1;
  if (this->channelname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channelname().data(), static_cast<int>(this->channelname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Chat.createChannel.channelName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->channelname(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Chat.createChannel)
  return target;
}

size_t createChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Chat.createChannel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string channelName = 1;
  if (this->channelname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->channelname());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void createChannel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Chat.createChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const createChannel* source =
      ::google::protobuf::DynamicCastToGenerated<createChannel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Chat.createChannel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Chat.createChannel)
    MergeFrom(*source);
  }
}

void createChannel::MergeFrom(const createChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Chat.createChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channelname().size() > 0) {

    channelname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channelname_);
  }
}

void createChannel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Chat.createChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void createChannel::CopyFrom(const createChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Chat.createChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool createChannel::IsInitialized() const {
  return true;
}

void createChannel::Swap(createChannel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void createChannel::InternalSwap(createChannel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  channelname_.Swap(&other->channelname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata createChannel::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Chat_2eproto);
  return ::file_level_metadata_Chat_2eproto[kIndexInFileMessages];
}


// ===================================================================

void showChannels::InitAsDefaultInstance() {
}
class showChannels::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

showChannels::showChannels()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Chat.showChannels)
}
showChannels::showChannels(const showChannels& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Chat.showChannels)
}

void showChannels::SharedCtor() {
}

showChannels::~showChannels() {
  // @@protoc_insertion_point(destructor:Chat.showChannels)
  SharedDtor();
}

void showChannels::SharedDtor() {
}

void showChannels::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const showChannels& showChannels::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_showChannels_Chat_2eproto.base);
  return *internal_default_instance();
}


void showChannels::Clear() {
// @@protoc_insertion_point(message_clear_start:Chat.showChannels)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* showChannels::_InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::google::protobuf::uint32 tag;
    ptr = ::google::protobuf::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag,
          _internal_metadata_.mutable_unknown_fields(), ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool showChannels::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Chat.showChannels)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Chat.showChannels)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Chat.showChannels)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void showChannels::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Chat.showChannels)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Chat.showChannels)
}

::google::protobuf::uint8* showChannels::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Chat.showChannels)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Chat.showChannels)
  return target;
}

size_t showChannels::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Chat.showChannels)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void showChannels::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Chat.showChannels)
  GOOGLE_DCHECK_NE(&from, this);
  const showChannels* source =
      ::google::protobuf::DynamicCastToGenerated<showChannels>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Chat.showChannels)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Chat.showChannels)
    MergeFrom(*source);
  }
}

void showChannels::MergeFrom(const showChannels& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Chat.showChannels)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void showChannels::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Chat.showChannels)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void showChannels::CopyFrom(const showChannels& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Chat.showChannels)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool showChannels::IsInitialized() const {
  return true;
}

void showChannels::Swap(showChannels* other) {
  if (other == this) return;
  InternalSwap(other);
}
void showChannels::InternalSwap(showChannels* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata showChannels::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Chat_2eproto);
  return ::file_level_metadata_Chat_2eproto[kIndexInFileMessages];
}


// ===================================================================

void showChannelsResponse::InitAsDefaultInstance() {
}
class showChannelsResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int showChannelsResponse::kChannelsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

showChannelsResponse::showChannelsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Chat.showChannelsResponse)
}
showChannelsResponse::showChannelsResponse(const showChannelsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      channels_(from.channels_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Chat.showChannelsResponse)
}

void showChannelsResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_showChannelsResponse_Chat_2eproto.base);
}

showChannelsResponse::~showChannelsResponse() {
  // @@protoc_insertion_point(destructor:Chat.showChannelsResponse)
  SharedDtor();
}

void showChannelsResponse::SharedDtor() {
}

void showChannelsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const showChannelsResponse& showChannelsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_showChannelsResponse_Chat_2eproto.base);
  return *internal_default_instance();
}


void showChannelsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Chat.showChannelsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channels_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* showChannelsResponse::_InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::google::protobuf::uint32 tag;
    ptr = ::google::protobuf::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated string channels = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::internal::InlineGreedyStringParserUTF8(add_channels(), ptr, ctx, "Chat.showChannelsResponse.channels");
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ctx->Done(&ptr)) return ptr;
        } while ((::google::protobuf::internal::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag,
          _internal_metadata_.mutable_unknown_fields(), ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool showChannelsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Chat.showChannelsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string channels = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_channels()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->channels(this->channels_size() - 1).data(),
            static_cast<int>(this->channels(this->channels_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Chat.showChannelsResponse.channels"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Chat.showChannelsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Chat.showChannelsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void showChannelsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Chat.showChannelsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string channels = 1;
  for (int i = 0, n = this->channels_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channels(i).data(), static_cast<int>(this->channels(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Chat.showChannelsResponse.channels");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->channels(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Chat.showChannelsResponse)
}

::google::protobuf::uint8* showChannelsResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Chat.showChannelsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string channels = 1;
  for (int i = 0, n = this->channels_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channels(i).data(), static_cast<int>(this->channels(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Chat.showChannelsResponse.channels");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->channels(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Chat.showChannelsResponse)
  return target;
}

size_t showChannelsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Chat.showChannelsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string channels = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->channels_size());
  for (int i = 0, n = this->channels_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->channels(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void showChannelsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Chat.showChannelsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const showChannelsResponse* source =
      ::google::protobuf::DynamicCastToGenerated<showChannelsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Chat.showChannelsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Chat.showChannelsResponse)
    MergeFrom(*source);
  }
}

void showChannelsResponse::MergeFrom(const showChannelsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Chat.showChannelsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channels_.MergeFrom(from.channels_);
}

void showChannelsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Chat.showChannelsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void showChannelsResponse::CopyFrom(const showChannelsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Chat.showChannelsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool showChannelsResponse::IsInitialized() const {
  return true;
}

void showChannelsResponse::Swap(showChannelsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void showChannelsResponse::InternalSwap(showChannelsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  channels_.InternalSwap(CastToBase(&other->channels_));
}

::google::protobuf::Metadata showChannelsResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Chat_2eproto);
  return ::file_level_metadata_Chat_2eproto[kIndexInFileMessages];
}


// ===================================================================

void deleteChannel::InitAsDefaultInstance() {
}
class deleteChannel::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int deleteChannel::kChannelNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

deleteChannel::deleteChannel()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Chat.deleteChannel)
}
deleteChannel::deleteChannel(const deleteChannel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channelname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.channelname().size() > 0) {
    channelname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channelname_);
  }
  // @@protoc_insertion_point(copy_constructor:Chat.deleteChannel)
}

void deleteChannel::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_deleteChannel_Chat_2eproto.base);
  channelname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

deleteChannel::~deleteChannel() {
  // @@protoc_insertion_point(destructor:Chat.deleteChannel)
  SharedDtor();
}

void deleteChannel::SharedDtor() {
  channelname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void deleteChannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const deleteChannel& deleteChannel::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_deleteChannel_Chat_2eproto.base);
  return *internal_default_instance();
}


void deleteChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:Chat.deleteChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channelname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* deleteChannel::_InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::google::protobuf::uint32 tag;
    ptr = ::google::protobuf::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string channelName = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::internal::InlineGreedyStringParserUTF8(mutable_channelname(), ptr, ctx, "Chat.deleteChannel.channelName");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag,
          _internal_metadata_.mutable_unknown_fields(), ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool deleteChannel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Chat.deleteChannel)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string channelName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->channelname().data(), static_cast<int>(this->channelname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Chat.deleteChannel.channelName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Chat.deleteChannel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Chat.deleteChannel)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void deleteChannel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Chat.deleteChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string channelName = 1;
  if (this->channelname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channelname().data(), static_cast<int>(this->channelname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Chat.deleteChannel.channelName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->channelname(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Chat.deleteChannel)
}

::google::protobuf::uint8* deleteChannel::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Chat.deleteChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string channelName = 1;
  if (this->channelname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channelname().data(), static_cast<int>(this->channelname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Chat.deleteChannel.channelName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->channelname(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Chat.deleteChannel)
  return target;
}

size_t deleteChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Chat.deleteChannel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string channelName = 1;
  if (this->channelname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->channelname());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void deleteChannel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Chat.deleteChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const deleteChannel* source =
      ::google::protobuf::DynamicCastToGenerated<deleteChannel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Chat.deleteChannel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Chat.deleteChannel)
    MergeFrom(*source);
  }
}

void deleteChannel::MergeFrom(const deleteChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Chat.deleteChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channelname().size() > 0) {

    channelname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channelname_);
  }
}

void deleteChannel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Chat.deleteChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void deleteChannel::CopyFrom(const deleteChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Chat.deleteChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool deleteChannel::IsInitialized() const {
  return true;
}

void deleteChannel::Swap(deleteChannel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void deleteChannel::InternalSwap(deleteChannel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  channelname_.Swap(&other->channelname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata deleteChannel::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Chat_2eproto);
  return ::file_level_metadata_Chat_2eproto[kIndexInFileMessages];
}


// ===================================================================

void helpMessage::InitAsDefaultInstance() {
}
class helpMessage::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

helpMessage::helpMessage()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Chat.helpMessage)
}
helpMessage::helpMessage(const helpMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Chat.helpMessage)
}

void helpMessage::SharedCtor() {
}

helpMessage::~helpMessage() {
  // @@protoc_insertion_point(destructor:Chat.helpMessage)
  SharedDtor();
}

void helpMessage::SharedDtor() {
}

void helpMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const helpMessage& helpMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_helpMessage_Chat_2eproto.base);
  return *internal_default_instance();
}


void helpMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:Chat.helpMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* helpMessage::_InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::google::protobuf::uint32 tag;
    ptr = ::google::protobuf::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag,
          _internal_metadata_.mutable_unknown_fields(), ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool helpMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Chat.helpMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Chat.helpMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Chat.helpMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void helpMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Chat.helpMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Chat.helpMessage)
}

::google::protobuf::uint8* helpMessage::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Chat.helpMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Chat.helpMessage)
  return target;
}

size_t helpMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Chat.helpMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void helpMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Chat.helpMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const helpMessage* source =
      ::google::protobuf::DynamicCastToGenerated<helpMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Chat.helpMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Chat.helpMessage)
    MergeFrom(*source);
  }
}

void helpMessage::MergeFrom(const helpMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Chat.helpMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void helpMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Chat.helpMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void helpMessage::CopyFrom(const helpMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Chat.helpMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool helpMessage::IsInitialized() const {
  return true;
}

void helpMessage::Swap(helpMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void helpMessage::InternalSwap(helpMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata helpMessage::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Chat_2eproto);
  return ::file_level_metadata_Chat_2eproto[kIndexInFileMessages];
}


// ===================================================================

void success::InitAsDefaultInstance() {
}
class success::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int success::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

success::success()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Chat.success)
}
success::success(const success& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.text().size() > 0) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  // @@protoc_insertion_point(copy_constructor:Chat.success)
}

void success::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_success_Chat_2eproto.base);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

success::~success() {
  // @@protoc_insertion_point(destructor:Chat.success)
  SharedDtor();
}

void success::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void success::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const success& success::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_success_Chat_2eproto.base);
  return *internal_default_instance();
}


void success::Clear() {
// @@protoc_insertion_point(message_clear_start:Chat.success)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* success::_InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::google::protobuf::uint32 tag;
    ptr = ::google::protobuf::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string text = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::internal::InlineGreedyStringParserUTF8(mutable_text(), ptr, ctx, "Chat.success.text");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag,
          _internal_metadata_.mutable_unknown_fields(), ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool success::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Chat.success)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string text = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Chat.success.text"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Chat.success)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Chat.success)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void success::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Chat.success)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Chat.success.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Chat.success)
}

::google::protobuf::uint8* success::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Chat.success)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Chat.success.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Chat.success)
  return target;
}

size_t success::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Chat.success)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 1;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void success::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Chat.success)
  GOOGLE_DCHECK_NE(&from, this);
  const success* source =
      ::google::protobuf::DynamicCastToGenerated<success>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Chat.success)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Chat.success)
    MergeFrom(*source);
  }
}

void success::MergeFrom(const success& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Chat.success)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
}

void success::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Chat.success)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void success::CopyFrom(const success& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Chat.success)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool success::IsInitialized() const {
  return true;
}

void success::Swap(success* other) {
  if (other == this) return;
  InternalSwap(other);
}
void success::InternalSwap(success* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  text_.Swap(&other->text_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata success::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Chat_2eproto);
  return ::file_level_metadata_Chat_2eproto[kIndexInFileMessages];
}


// ===================================================================

void failure::InitAsDefaultInstance() {
}
class failure::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int failure::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

failure::failure()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Chat.failure)
}
failure::failure(const failure& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.text().size() > 0) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  // @@protoc_insertion_point(copy_constructor:Chat.failure)
}

void failure::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_failure_Chat_2eproto.base);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

failure::~failure() {
  // @@protoc_insertion_point(destructor:Chat.failure)
  SharedDtor();
}

void failure::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void failure::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const failure& failure::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_failure_Chat_2eproto.base);
  return *internal_default_instance();
}


void failure::Clear() {
// @@protoc_insertion_point(message_clear_start:Chat.failure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* failure::_InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::google::protobuf::uint32 tag;
    ptr = ::google::protobuf::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string text = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::internal::InlineGreedyStringParserUTF8(mutable_text(), ptr, ctx, "Chat.failure.text");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag,
          _internal_metadata_.mutable_unknown_fields(), ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool failure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Chat.failure)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string text = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Chat.failure.text"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Chat.failure)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Chat.failure)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void failure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Chat.failure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Chat.failure.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Chat.failure)
}

::google::protobuf::uint8* failure::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Chat.failure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Chat.failure.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Chat.failure)
  return target;
}

size_t failure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Chat.failure)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 1;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void failure::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Chat.failure)
  GOOGLE_DCHECK_NE(&from, this);
  const failure* source =
      ::google::protobuf::DynamicCastToGenerated<failure>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Chat.failure)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Chat.failure)
    MergeFrom(*source);
  }
}

void failure::MergeFrom(const failure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Chat.failure)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
}

void failure::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Chat.failure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void failure::CopyFrom(const failure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Chat.failure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool failure::IsInitialized() const {
  return true;
}

void failure::Swap(failure* other) {
  if (other == this) return;
  InternalSwap(other);
}
void failure::InternalSwap(failure* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  text_.Swap(&other->text_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata failure::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Chat_2eproto);
  return ::file_level_metadata_Chat_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Chat
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::Chat::ChatMessage* Arena::CreateMaybeMessage< ::Chat::ChatMessage >(Arena* arena) {
  return Arena::CreateInternal< ::Chat::ChatMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::Chat::SignIn* Arena::CreateMaybeMessage< ::Chat::SignIn >(Arena* arena) {
  return Arena::CreateInternal< ::Chat::SignIn >(arena);
}
template<> PROTOBUF_NOINLINE ::Chat::SignOut* Arena::CreateMaybeMessage< ::Chat::SignOut >(Arena* arena) {
  return Arena::CreateInternal< ::Chat::SignOut >(arena);
}
template<> PROTOBUF_NOINLINE ::Chat::Unauthorized* Arena::CreateMaybeMessage< ::Chat::Unauthorized >(Arena* arena) {
  return Arena::CreateInternal< ::Chat::Unauthorized >(arena);
}
template<> PROTOBUF_NOINLINE ::Chat::joinChannel* Arena::CreateMaybeMessage< ::Chat::joinChannel >(Arena* arena) {
  return Arena::CreateInternal< ::Chat::joinChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::Chat::leaveChannel* Arena::CreateMaybeMessage< ::Chat::leaveChannel >(Arena* arena) {
  return Arena::CreateInternal< ::Chat::leaveChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::Chat::createChannel* Arena::CreateMaybeMessage< ::Chat::createChannel >(Arena* arena) {
  return Arena::CreateInternal< ::Chat::createChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::Chat::showChannels* Arena::CreateMaybeMessage< ::Chat::showChannels >(Arena* arena) {
  return Arena::CreateInternal< ::Chat::showChannels >(arena);
}
template<> PROTOBUF_NOINLINE ::Chat::showChannelsResponse* Arena::CreateMaybeMessage< ::Chat::showChannelsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::Chat::showChannelsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::Chat::deleteChannel* Arena::CreateMaybeMessage< ::Chat::deleteChannel >(Arena* arena) {
  return Arena::CreateInternal< ::Chat::deleteChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::Chat::helpMessage* Arena::CreateMaybeMessage< ::Chat::helpMessage >(Arena* arena) {
  return Arena::CreateInternal< ::Chat::helpMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::Chat::success* Arena::CreateMaybeMessage< ::Chat::success >(Arena* arena) {
  return Arena::CreateInternal< ::Chat::success >(arena);
}
template<> PROTOBUF_NOINLINE ::Chat::failure* Arena::CreateMaybeMessage< ::Chat::failure >(Arena* arena) {
  return Arena::CreateInternal< ::Chat::failure >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
